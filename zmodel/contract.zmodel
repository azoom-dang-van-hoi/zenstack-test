import 'base'
import 'user'
import 'parking'
import 'organization'

model ParkingContract extends BaseModal {
  parkingId Int @map("parking_id")
  parking Parking @relation(fields: [parkingId], references: [id])
  contractorId Int? @map("contractor_id")
  contractor Contractor? @relation(fields: [contractorId], references: [id])
  status Int

  @@allow('all', 
        auth().role == 'admin' || 
        (
            auth().role == 'owner' &&
            auth().organizationId == parking.organizationId &&
            (
              parking.regionId == null ||
              (
                parking.region.organizationStaffRegions?[organizationStaffId == auth().id]
              )
            )
        )
    )

  userProcedures UserProcedure[]

  @@map("parking_contract")
}

model UserProcedure extends BaseModal {
  parkingContractId Int? @map("parking_contract_id")
  parkingContract ParkingContract? @relation(fields: [parkingContractId], references: [id])
  organizationId Int? @map("organization_id")
  organization Organization? @relation(fields: [organizationId], references: [id])
  status Int @map("status") @db.TinyInt
  type Int @map("type")
  content Json? @map("content")
  contractorId Int? @map("contractor_id")
  contractor Contractor? @relation(fields: [contractorId], references: [id])

  @@allow('all', 
    auth().role == 'admin' ||
    (
      auth().role == 'owner' &&
      (
  // Update contractor information affects multiple contracts of various owners.
        (
            parkingContractId == null &&
            auth().organizationId == organizationId &&
            contractorId != null &&
            contractor.parkingContracts?[
              parking.regionId == null || 
              parking.region.organizationStaffRegions?[organizationStaffId == auth().id]
            ]
        ) || 
  // Update contract information
        (
            organizationId == null &&
            parkingContract.parking.organizationId == auth().organizationId &&
  // TODO: Add a custom function or use inheritance to check region conditions
  // Logic check region
            (
                parkingContract.parking.regionId == null ||
                parkingContract.parking.region.organizationStaffRegions?[organizationStaffId == auth().id]
            )
        )
      ) 
    )
  )
  @@map("user_procedure")
}

model Contractor extends BaseModal {
  name String
  email String @unique

  parkingContracts ParkingContract[]
  userProcedures UserProcedure[]
  notifications Notification[]

  @@allow('all', 
    auth().role == 'admin' ||
    (
      auth().role == 'owner' &&
      parkingContracts?[parking.organizationId == auth().organizationId && 
        (
          parking.regionId == null ||
          parking.region.organizationStaffRegions?[organizationStaffId == auth().id]
        )
      ]
    )
  )
  @@map("contractor")
}

model Notification extends BaseModal {
  createdOrganizationId Int? @map("created_organization_id")
  contentType Int @map("content_type")
  historyId String? @map("history_id")
  email String @map("email") @db.VarChar(255)
  contractorId Int? @map("contractor_id")
  contractor Contractor? @relation(fields: [contractorId], references: [id])
  content String @map("content") @db.VarChar(255)
  detailTitle String? @map("detail_title") @db.VarChar(60)
  detailUrl String? @map("detail_url") @db.VarChar(255)
  target Int @map("target")
  readDatetime DateTime? @map("read_datetime")

  @@allow('all',
    auth().role == 'admin' ||
    (
      auth().role == 'owner' &&
      (
        createdOrganizationId == auth().organizationId &&
        contractorId != null &&
        contractor.parkingContracts?[
          parking.organizationId == auth().id &&
          parking.regionId == null || 
          parking.region.organizationStaffRegions?[organizationStaffId == auth().id]
        ]
      )
    )
  )

  @@map("notification")
}
